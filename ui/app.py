# ui/app.py

import streamlit as st
import requests
import uuid

# --- C·∫•u h√¨nh trang ---
st.set_page_config(
    page_title="Kitchen Care Chatbot",
    page_icon="ü§ñ"
)

st.title("ü§ñ Kitchen Care - Tr·ª£ l√Ω Mua s·∫Øm")
st.caption("H·ªèi t√¥i b·∫•t c·ª© ƒëi·ªÅu g√¨ v·ªÅ c√°c s·∫£n ph·∫©m nh√† b·∫øp c·ªßa ch√∫ng t√¥i!")

# --- URL c·ªßa API Backend (FastAPI) ---
# Quan tr·ªçng: ƒê·∫£m b·∫£o backend FastAPI c·ªßa b·∫°n ƒëang ch·∫°y!
# N·∫øu b·∫°n ch·∫°y c·∫£ hai tr√™n c√πng m·ªôt m√°y, ƒë√¢y l√† URL m·∫∑c ƒë·ªãnh.
API_URL = "http://127.0.0.1:8000/api/v1/chatbot/chat"

# --- Qu·∫£n l√Ω Tr·∫°ng th√°i Phi√™n (Session State) ---
# D√πng session_state c·ªßa Streamlit ƒë·ªÉ l∆∞u l·ªãch s·ª≠ chat v√† session_id

# Kh·ªüi t·∫°o session_id n·∫øu ch∆∞a c√≥
if 'session_id' not in st.session_state:
    st.session_state.session_id = str(uuid.uuid4())

# Kh·ªüi t·∫°o l·ªãch s·ª≠ chat n·∫øu ch∆∞a c√≥
if "messages" not in st.session_state:
    st.session_state.messages = [
        {"role": "assistant", "content": "Xin ch√†o! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n h√¥m nay?"}
    ]

# --- Hi·ªÉn th·ªã L·ªãch s·ª≠ Chat ---
# L·∫∑p qua danh s√°ch tin nh·∫Øn ƒë√£ l∆∞u v√† hi·ªÉn th·ªã ch√∫ng
for msg in st.session_state.messages:
    with st.chat_message(msg["role"]):
        st.write(msg["content"])
        # N·∫øu l√† tin nh·∫Øn c·ªßa assistant v√† c√≥ source_documents, hi·ªÉn th·ªã ch√∫ng
        if msg["role"] == "assistant" and "sources" in msg and msg["sources"]:
            with st.expander("Xem ngu·ªìn tham kh·∫£o"):
                for source in msg["sources"]:
                    st.json(source) # Hi·ªÉn th·ªã JSON c·ªßa source_documents

# --- X·ª≠ l√Ω Input c·ªßa Ng∆∞·ªùi d√πng ---
# D√πng st.chat_input ƒë·ªÉ t·∫°o m·ªôt √¥ nh·∫≠p li·ªáu ·ªü cu·ªëi trang
if prompt := st.chat_input("Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n..."):
    # 1. Hi·ªÉn th·ªã tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng l√™n giao di·ªán ngay l·∫≠p t·ª©c
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.write(prompt)

    # 2. Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·ªÉ g·ª≠i ƒë·∫øn API
    # L·∫•y l·ªãch s·ª≠ chat (tr·ª´ tin nh·∫Øn ch√†o m·ª´ng ƒë·∫ßu ti√™n)
    chat_history_for_api = [
        {"type": "human" if msg["role"] == "user" else "ai", "content": msg["content"]}
        for msg in st.session_state.messages[1:-1] # B·ªè tin nh·∫Øn ch√†o m·ª´ng v√† tin nh·∫Øn hi·ªán t·∫°i
    ]
    
    payload = {
        "message": prompt,
        "session_id": st.session_state.session_id,
        "chat_history": chat_history_for_api
    }

    # 3. G·ªçi API v√† x·ª≠ l√Ω response
    try:
        with st.spinner("Bot ƒëang suy nghƒ©..."):
            response = requests.post(API_URL, json=payload)
            response.raise_for_status()  # N√©m l·ªói n·∫øu status code l√† 4xx ho·∫∑c 5xx
            
            data = response.json()
            answer = data.get("answer", "Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra.")
            sources = data.get("source_documents", [])
            
            # 4. Hi·ªÉn th·ªã c√¢u tr·∫£ l·ªùi c·ªßa bot
            msg_to_add = {"role": "assistant", "content": answer, "sources": sources}
            st.session_state.messages.append(msg_to_add)
            
            with st.chat_message("assistant"):
                st.write(answer)
                if sources:
                    with st.expander("Xem ngu·ªìn tham kh·∫£o"):
                        for source in sources:
                            st.json(source) # Hi·ªÉn th·ªã JSON c·ªßa source_documents

    except requests.exceptions.RequestException as e:
        st.error(f"L·ªói k·∫øt n·ªëi ƒë·∫øn API: {e}")
        error_msg = {"role": "assistant", "content": f"Xin l·ªói, t√¥i kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß. Vui l√≤ng th·ª≠ l·∫°i sau. (L·ªói: {e})"}
        st.session_state.messages.append(error_msg)
        with st.chat_message("assistant"):
            st.write(error_msg["content"])